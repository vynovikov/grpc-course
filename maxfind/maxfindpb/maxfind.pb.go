// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.6
// source: maxfindpb/maxfind.proto

package maxfindpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MaxfindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numreq int32 `protobuf:"varint,1,opt,name=numreq,proto3" json:"numreq,omitempty"`
}

func (x *MaxfindRequest) Reset() {
	*x = MaxfindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maxfindpb_maxfind_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxfindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxfindRequest) ProtoMessage() {}

func (x *MaxfindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maxfindpb_maxfind_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxfindRequest.ProtoReflect.Descriptor instead.
func (*MaxfindRequest) Descriptor() ([]byte, []int) {
	return file_maxfindpb_maxfind_proto_rawDescGZIP(), []int{0}
}

func (x *MaxfindRequest) GetNumreq() int32 {
	if x != nil {
		return x.Numreq
	}
	return 0
}

type MaxfindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numres int32 `protobuf:"varint,1,opt,name=numres,proto3" json:"numres,omitempty"`
}

func (x *MaxfindResponse) Reset() {
	*x = MaxfindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maxfindpb_maxfind_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxfindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxfindResponse) ProtoMessage() {}

func (x *MaxfindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maxfindpb_maxfind_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxfindResponse.ProtoReflect.Descriptor instead.
func (*MaxfindResponse) Descriptor() ([]byte, []int) {
	return file_maxfindpb_maxfind_proto_rawDescGZIP(), []int{1}
}

func (x *MaxfindResponse) GetNumres() int32 {
	if x != nil {
		return x.Numres
	}
	return 0
}

var File_maxfindpb_maxfind_proto protoreflect.FileDescriptor

var file_maxfindpb_maxfind_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x70, 0x62, 0x2f, 0x6d, 0x61, 0x78, 0x66,
	0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x61, 0x78, 0x66, 0x69,
	0x6e, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x72, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x72, 0x65, 0x71, 0x22, 0x29, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x72, 0x65, 0x73, 0x32, 0x54, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x66, 0x69,
	0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x66, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x2e, 0x6d,
	0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6d, 0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x2e, 0x6d, 0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0d, 0x5a,
	0x0b, 0x2e, 0x2f, 0x6d, 0x61, 0x78, 0x66, 0x69, 0x6e, 0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_maxfindpb_maxfind_proto_rawDescOnce sync.Once
	file_maxfindpb_maxfind_proto_rawDescData = file_maxfindpb_maxfind_proto_rawDesc
)

func file_maxfindpb_maxfind_proto_rawDescGZIP() []byte {
	file_maxfindpb_maxfind_proto_rawDescOnce.Do(func() {
		file_maxfindpb_maxfind_proto_rawDescData = protoimpl.X.CompressGZIP(file_maxfindpb_maxfind_proto_rawDescData)
	})
	return file_maxfindpb_maxfind_proto_rawDescData
}

var file_maxfindpb_maxfind_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_maxfindpb_maxfind_proto_goTypes = []interface{}{
	(*MaxfindRequest)(nil),  // 0: maxfind.maxfindRequest
	(*MaxfindResponse)(nil), // 1: maxfind.maxfindResponse
}
var file_maxfindpb_maxfind_proto_depIdxs = []int32{
	0, // 0: maxfind.maxfindService.maxfind:input_type -> maxfind.maxfindRequest
	1, // 1: maxfind.maxfindService.maxfind:output_type -> maxfind.maxfindResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_maxfindpb_maxfind_proto_init() }
func file_maxfindpb_maxfind_proto_init() {
	if File_maxfindpb_maxfind_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_maxfindpb_maxfind_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxfindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maxfindpb_maxfind_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxfindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_maxfindpb_maxfind_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_maxfindpb_maxfind_proto_goTypes,
		DependencyIndexes: file_maxfindpb_maxfind_proto_depIdxs,
		MessageInfos:      file_maxfindpb_maxfind_proto_msgTypes,
	}.Build()
	File_maxfindpb_maxfind_proto = out.File
	file_maxfindpb_maxfind_proto_rawDesc = nil
	file_maxfindpb_maxfind_proto_goTypes = nil
	file_maxfindpb_maxfind_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MaxfindServiceClient is the client API for MaxfindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MaxfindServiceClient interface {
	//client streaming
	Maxfind(ctx context.Context, opts ...grpc.CallOption) (MaxfindService_MaxfindClient, error)
}

type maxfindServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaxfindServiceClient(cc grpc.ClientConnInterface) MaxfindServiceClient {
	return &maxfindServiceClient{cc}
}

func (c *maxfindServiceClient) Maxfind(ctx context.Context, opts ...grpc.CallOption) (MaxfindService_MaxfindClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MaxfindService_serviceDesc.Streams[0], "/maxfind.maxfindService/maxfind", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxfindServiceMaxfindClient{stream}
	return x, nil
}

type MaxfindService_MaxfindClient interface {
	Send(*MaxfindRequest) error
	Recv() (*MaxfindResponse, error)
	grpc.ClientStream
}

type maxfindServiceMaxfindClient struct {
	grpc.ClientStream
}

func (x *maxfindServiceMaxfindClient) Send(m *MaxfindRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxfindServiceMaxfindClient) Recv() (*MaxfindResponse, error) {
	m := new(MaxfindResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxfindServiceServer is the server API for MaxfindService service.
type MaxfindServiceServer interface {
	//client streaming
	Maxfind(MaxfindService_MaxfindServer) error
}

// UnimplementedMaxfindServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMaxfindServiceServer struct {
}

func (*UnimplementedMaxfindServiceServer) Maxfind(MaxfindService_MaxfindServer) error {
	return status.Errorf(codes.Unimplemented, "method Maxfind not implemented")
}

func RegisterMaxfindServiceServer(s *grpc.Server, srv MaxfindServiceServer) {
	s.RegisterService(&_MaxfindService_serviceDesc, srv)
}

func _MaxfindService_Maxfind_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxfindServiceServer).Maxfind(&maxfindServiceMaxfindServer{stream})
}

type MaxfindService_MaxfindServer interface {
	Send(*MaxfindResponse) error
	Recv() (*MaxfindRequest, error)
	grpc.ServerStream
}

type maxfindServiceMaxfindServer struct {
	grpc.ServerStream
}

func (x *maxfindServiceMaxfindServer) Send(m *MaxfindResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxfindServiceMaxfindServer) Recv() (*MaxfindRequest, error) {
	m := new(MaxfindRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MaxfindService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maxfind.maxfindService",
	HandlerType: (*MaxfindServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "maxfind",
			Handler:       _MaxfindService_Maxfind_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "maxfindpb/maxfind.proto",
}
